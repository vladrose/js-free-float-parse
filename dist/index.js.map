{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Decimal from \"decimal.js\"\n\ntype JsFreeFloatParseOptions = {\n  /**\n   * The minimum allowable value. Defaults to -Infinity.\n   * */\n  min?: number\n  /**\n   * The maximum allowable value. Defaults to Infinity.\n   * */\n  max?: number\n  /**\n   * If set to true, the function will use a dot as the decimal separator.\n   * If false, it will use a comma. Defaults to comma.\n   * */\n  dot?: boolean\n  /**\n   * The number of decimal places to include in the float output. Does not round the number, just cut\n   * */\n  decimals?: number\n}\n\nfunction replaceDotByComma(input: string, dot = false) {\n  return dot ? input : input.replace(\".\", \",\")\n}\n\nfunction applyDecimals(input: string, decimals: number | undefined) {\n  if (typeof decimals === \"number\") {\n    if (!decimals) throw new Error(\"decimals must be a positive integer\")\n\n    const [basePart, floatPart] = input.split(\".\")\n    if (floatPart) {\n      return [basePart, floatPart.slice(0, decimals)].join(\".\")\n    }\n  }\n\n  return input\n}\n\nexport default function jsFreeFloatParse(input: string, options?: JsFreeFloatParseOptions) {\n  try {\n    const { min, max, dot = false, decimals } = options || {}\n\n    const isMin = typeof min === \"number\"\n    const isMax = typeof max === \"number\"\n\n    let outputNumber = new Decimal(isMin ? min : 0)\n    let outputString: string = outputNumber.toString()\n\n    // eslint-disable-next-line no-inner-declarations\n    function result() {\n      outputString = replaceDotByComma(outputString, dot)\n      return [outputString, outputNumber.toNumber()] as const\n    }\n\n    if (!input) {\n      return result()\n    }\n\n    // Some short exceptions\n    switch (true) {\n      case input === \",\":\n      case input === \".\": {\n        outputString = dot ? \"0.0\" : \"0,0\"\n        return result()\n      }\n      case input === \"0,\":\n      case input === \"0.\": {\n        outputString = dot ? \"0.\" : \"0,\"\n        return result()\n      }\n      case input === \"-\": {\n        outputString = \"-\"\n        return result()\n      }\n      case input === \"-0\": {\n        outputString = \"-0\"\n        return result()\n      }\n      case input === \"-0,\":\n      case input === \"-0.\": {\n        outputString = dot ? \"-0.\" : \"-0,\"\n        return result()\n      }\n    }\n\n    // E cases\n    switch (true) {\n      case input.includes(\"e+\"):\n      case input.includes(\"e-\"): {\n        // Split the number into coefficient and exponent parts\n        const [coefficientStr, exponentStr] = input.split(\"e\")\n        // Parse the exponent part into an integer\n        const exponent = parseInt(exponentStr, 10)\n\n        // Split the coefficient part into integer and decimal parts\n        const [integerPart, decimalPart = \"\"] = coefficientStr.replaceAll(\".\", \",\").split(\",\")\n\n        // When the exponent is positive\n        if (exponent > 0) {\n          // Calculate the length of the decimal part\n          const totalDecimalLength = decimalPart.length\n\n          if (totalDecimalLength > exponent) {\n            // If the decimal part is longer than the exponent\n            // Move the decimal point to the right within the decimal part\n            const newIntegerPart = integerPart + decimalPart.slice(0, exponent)\n            const newDecimalPart = decimalPart.slice(exponent)\n            outputString = newIntegerPart + \".\" + newDecimalPart\n          } else {\n            // If the decimal part is shorter or equal to the exponent\n            // Add necessary zeros to the end of the integer part\n            const zeroPadding = \"0\".repeat(exponent - totalDecimalLength)\n            outputString = integerPart + decimalPart + zeroPadding\n          }\n          // When the exponent is negative\n        } else {\n          // Calculate the necessary zeros to pad before the integer part\n          const zeroPadding = \"0\".repeat(Math.abs(exponent) - 1)\n          // Construct the result string with leading zeros\n          outputString = \"0.\" + zeroPadding + integerPart + decimalPart\n        }\n\n        // Set decimals\n        outputString = applyDecimals(outputString, decimals)\n        outputNumber = new Decimal(outputString)\n\n        return result()\n      }\n    }\n\n    const isNegative = input.startsWith(\"-\")\n\n    // Remove non-digit signs excluding dot and comma\n    input = input.replace(/[^\\d.,]/g, \"\")\n\n    // Replace all commas with dots\n    input = input.replaceAll(\",\", \".\")\n\n    // Remove leading dots\n    input = input.replace(/^\\.*/, \"\")\n\n    // Remove multiple dots\n    const dotParts = input.split(\".\")\n    // Means we have more than one dot\n    if (dotParts.length > 2) {\n      const [firstPart, ...restParts] = dotParts\n      const firstPartNumber = parseFloat(firstPart)\n      const isFirstPartNumber = !isNaN(firstPartNumber)\n      if (isFirstPartNumber) {\n        const noDotsRestParts = restParts.join(\"\")\n        input = [firstPart, noDotsRestParts].join(\".\")\n      }\n    }\n\n    // Remove leading zeros\n    if (input.startsWith(\"0\")) {\n      input = input.replace(/^0*(?=\\d)/, \"\")\n    }\n\n    // Return negative sign back after removing\n    if (isNegative) {\n      input = \"-\" + input\n    }\n\n    /*\n     * Final check and decimals\n     * */\n    outputNumber = new Decimal(input)\n    outputString = input\n\n    // Apply min/max\n    if (isMin && outputNumber.lt(min)) {\n      outputNumber = new Decimal(min)\n      outputString = outputNumber.toFixed()\n    }\n\n    if (isMax && outputNumber.gt(max)) {\n      outputNumber = new Decimal(max)\n      outputString = outputNumber.toFixed()\n    }\n\n    // Set decimals\n    outputString = applyDecimals(outputString, decimals)\n    outputNumber = new Decimal(outputString)\n\n    return result()\n  } catch (e) {\n    throw new Error(`jsFreeFloatParse: Failed to parse ${input}`)\n  }\n}\n"]}